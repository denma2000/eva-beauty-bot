require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

// ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ==========
const bot = new TelegramBot(process.env.BOT_TOKEN, {polling: true});

// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞
const MASTER_USERNAME = 'denma2000';
let MASTER_CHAT_ID = null;

// ========== –•–†–ê–ù–ò–õ–ò–©–ê –î–ê–ù–ù–´–• ==========
// –ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
const activeBookings = new Map();
const confirmedBookings = new Map();

// –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥
const newServiceProcess = new Map();

// –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥
const services = {
    classic: {
        name: "–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π",
        price: 1500,
        duration: 60 // –º–∏–Ω—É—Ç—ã
    },
    gel: {
        name: "–ú–∞–Ω–∏–∫—é—Ä —Å –≥–µ–ª—å-–ª–∞–∫–æ–º",
        price: 2500,
        duration: 120
    },
    remove: {
        name: "–°–Ω—è—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫–∞",
        price: 500,
        duration: 30
    }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
const schedule = {
    workHours: {
        start: 10,
        end: 20
    },
    breakHours: {
        start: 13,
        end: 14
    },
    workDays: new Set(['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']),
    customDates: new Map()
};

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏
function formatDuration(minutes) {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours > 0) {
        return `${hours} —á ${mins > 0 ? mins + ' –º–∏–Ω' : ''}`;
    }
    return `${mins} –º–∏–Ω`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(hour) {
    return `${hour.toString().padStart(2, '0')}:00`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
function generateServiceKey(name) {
    return name
        .toLowerCase()
        .replace(/[^a-z–∞-—è0-9]/g, '_')
        .replace(/_+/g, '_')
        .replace(/^_|_$/g, '');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
function generateTimeButtons() {
    const buttons = [];
    let row = [];
    
    for (let hour = 9; hour <= 20; hour++) {
        row.push({
            text: formatTime(hour),
            callback_data: `time_select_${hour}`
        });
        
        if (row.length === 3) {
            buttons.push([...row]);
            row = [];
        }
    }
    
    if (row.length > 0) {
        buttons.push(row);
    }
    
    buttons.push([{
        text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥",
        callback_data: "schedule_back"
    }]);
    
    return buttons;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞
function isMaster(username) {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Ç–µ—Ä–∞:', username, MASTER_USERNAME, username === MASTER_USERNAME);
    return username === MASTER_USERNAME;
}
```javascript
// ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;
    
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', { chatId, username }); // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    
    if (isMaster(username)) {
        MASTER_CHAT_ID = chatId;
        console.log('–ú–∞—Å—Ç–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', MASTER_CHAT_ID);
        
        // –ú–µ–Ω—é –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
        const keyboard = {
            keyboard: [
                ['üë• –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'],
                ['üìÖ –í—Å–µ –∑–∞–ø–∏—Å–∏'],
                ['‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º'],
                ['üíÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏']
            ],
            resize_keyboard: true
        };
        
        bot.sendMessage(chatId, 
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –º–∞—Å—Ç–µ—Ä Eva Beauty.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            {
                reply_markup: keyboard
            }
        );
    } else {
        // –ú–µ–Ω—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        const keyboard = {
            keyboard: [
                ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É'],
                ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚ÑπÔ∏è –û —Å–∞–ª–æ–Ω–µ Eva Beauty']
            ],
            resize_keyboard: true
        };
        
        bot.sendMessage(chatId, 
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Eva Beauty! üíÖ\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
            {
                reply_markup: keyboard
            }
        );
    }
});

// ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–õ–£–ì–ê–ú–ò ==========

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏"
bot.onText(/üíÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏/, (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;
    
    if (!isMaster(username)) return;

    const serviceButtons = Object.entries(services).map(([key, service]) => ([{
        text: `${service.name} (${formatDuration(service.duration)})`,
        callback_data: `service_edit_${key}`
    }]));

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
    serviceButtons.push([{
        text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É",
        callback_data: "service_add"
    }]);
    
    const keyboard = {
        inline_keyboard: serviceButtons
    };
    
    bot.sendMessage(chatId, 
        '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:',
        {
            reply_markup: keyboard
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;
    
    if (!isMaster(username)) return;
    
    const process = newServiceProcess.get(chatId);
    if (!process) return;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
    if (process.step === 'name' && !process.serviceKey) {
        process.name = msg.text;
        process.step = 'price';
        newServiceProcess.set(chatId, process);
        
        bot.sendMessage(chatId, 
            '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):',
            {
                reply_markup: {
                    force_reply: true
                }
            }
        );
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
    else if (process.step === 'price' && !process.serviceKey) {
        const price = parseInt(msg.text);
        if (isNaN(price)) {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)');
            return;
        }
        
        process.price = price;
        process.step = 'duration';
        newServiceProcess.set(chatId, process);
        
        const keyboard = {
            inline_keyboard: [
                [
                    { text: "30 –º–∏–Ω", callback_data: "new_duration_30" },
                    { text: "45 –º–∏–Ω", callback_data: "new_duration_45" },
                    { text: "60 –º–∏–Ω", callback_data: "new_duration_60" }
                ],
                [
                    { text: "90 –º–∏–Ω", callback_data: "new_duration_90" },
                    { text: "120 –º–∏–Ω", callback_data: "new_duration_120" },
                    { text: "150 –º–∏–Ω", callback_data: "new_duration_150" }
                ]
            ]
        };
        
        bot.sendMessage(chatId, 
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏:',
            {
                reply_markup: keyboard
            }
        );
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å–ª—É–≥–∏
    else if (process.step === 'name' && process.serviceKey) {
        const service = services[process.serviceKey];
        service.name = msg.text;
        
        bot.sendMessage(chatId, `
‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!

üìù –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${service.name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price}‚ÇΩ
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formatDuration(service.duration)}
        `);
        
        newServiceProcess.delete(chatId);
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å–ª—É–≥–∏
    else if (process.step === 'price' && process.serviceKey) {
        const price = parseInt(msg.text);
        if (isNaN(price)) {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)');
            return;
        }
        
        const service = services[process.serviceKey];
        service.price = price;
        
        bot.sendMessage(chatId, `
‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${service.name}
üí∞ –ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price}‚ÇΩ
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formatDuration(service.duration)}
        `);
        
        newServiceProcess.delete(chatId);
    }
});
// ========== –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK –ó–ê–ü–†–û–°–û–í ==========
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const username = query.from.username;

    try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
        if (query.data === 'service_add') {
            if (!isMaster(username)) return;
            
            newServiceProcess.set(chatId, {
                step: 'name'
            });
            
            bot.sendMessage(chatId, 
                '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:',
                {
                    reply_markup: {
                        force_reply: true
                    }
                }
            );
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å–ª—É–≥–∏
        else if (query.data.startsWith('service_edit_')) {
            if (!isMaster(username)) return;
            
            const serviceKey = query.data.split('_')[2];
            const service = services[serviceKey];
            
            const keyboard = {
                inline_keyboard: [
                    [{ 
                        text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", 
                        callback_data: `edit_name_${serviceKey}` 
                    }],
                    [{ 
                        text: "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", 
                        callback_data: `edit_price_${serviceKey}` 
                    }],
                    [{ 
                        text: "‚è± –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 
                        callback_data: `edit_duration_${serviceKey}` 
                    }],
                    [{ 
                        text: "üóë –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", 
                        callback_data: `delete_service_${serviceKey}` 
                    }],
                    [{ 
                        text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", 
                        callback_data: "services_back" 
                    }]
                ]
            };
            
            bot.sendMessage(chatId, `
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${service.name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price}‚ÇΩ
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formatDuration(service.duration)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            `, {
                reply_markup: keyboard
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è/—Ü–µ–Ω—ã
        else if (query.data.startsWith('edit_name_') || query.data.startsWith('edit_price_')) {
            if (!isMaster(username)) return;
            
            const [action, field, serviceKey] = query.data.split('_');
            const service = services[serviceKey];
            
            newServiceProcess.set(chatId, {
                step: field,
                serviceKey: serviceKey,
                currentService: service
            });
            
            bot.sendMessage(chatId, 
                `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ ${field === 'name' ? '–Ω–∞–∑–≤–∞–Ω–∏–µ' : '—Å—Ç–æ–∏–º–æ—Å—Ç—å'} –¥–ª—è —É—Å–ª—É–≥–∏ "${service.name}":`,
                {
                    reply_markup: {
                        force_reply: true
                    }
                }
            );
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        else if (query.data.startsWith('edit_duration_')) {
            if (!isMaster(username)) return;
            
            const serviceKey = query.data.split('_')[2];
            const service = services[serviceKey];
            
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: "30 –º–∏–Ω", callback_data: `set_duration_${serviceKey}_30` },
                        { text: "45 –º–∏–Ω", callback_data: `set_duration_${serviceKey}_45` },
                        { text: "60 –º–∏–Ω", callback_data: `set_duration_${serviceKey}_60` }
                    ],
                    [
                        { text: "90 –º–∏–Ω", callback_data: `set_duration_${serviceKey}_90` },
                        { text: "120 –º–∏–Ω", callback_data: `set_duration_${serviceKey}_120` },
                        { text: "150 –º–∏–Ω", callback_data: `set_duration_${serviceKey}_150` }
                    ]
                ]
            };
            
            bot.sendMessage(chatId, `
–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —É—Å–ª—É–≥–∏ "${service.name}"
–¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formatDuration(service.duration)}
            `, {
                reply_markup: keyboard
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        else if (query.data.startsWith('set_duration_')) {
            if (!isMaster(username)) return;
            
            const [_, __, serviceKey, duration] = query.data.split('_');
            const service = services[serviceKey];
            
            service.duration = parseInt(duration);
            
            bot.sendMessage(chatId, `
‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${service.name}
‚è± –ù–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formatDuration(service.duration)}
            `);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
        else if (query.data.startsWith('delete_service_')) {
            if (!isMaster(username)) return;
            
            const serviceKey = query.data.split('_')[2];
            const service = services[serviceKey];
            
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data: `confirm_delete_${serviceKey}` },
                        { text: "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data: "services_back" }
                    ]
                ]
            };
            
            bot.sendMessage(chatId, `
‚ùóÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏:

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${service.name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price}‚ÇΩ
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formatDuration(service.duration)}

–í—ã —É–≤–µ—Ä–µ–Ω—ã?
            `, {
                reply_markup: keyboard
            });
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
        else if (query.data.startsWith('confirm_delete_')) {
            if (!isMaster(username)) return;
            
            const serviceKey = query.data.split('_')[2];
            const service = services[serviceKey];
            const serviceName = service.name;
            
            delete services[serviceKey];
            
            bot.sendMessage(chatId, `‚úÖ –£—Å–ª—É–≥–∞ "${serviceName}" —É–¥–∞–ª–µ–Ω–∞`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
            const serviceButtons = Object.entries(services).map(([key, service]) => ([{
                text: `${service.name} (${formatDuration(service.duration)})`,
                callback_data: `service_edit_${key}`
            }]));
            
            serviceButtons.push([{
                text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É",
                callback_data: "service_add"
            }]);
            
            const keyboard = {
                inline_keyboard: serviceButtons
            };
            
            bot.sendMessage(chatId, 
                '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:',
                {
                    reply_markup: keyboard
                }
            );
        }

        // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
        else if (query.data === 'services_back') {
            const serviceButtons = Object.entries(services).map(([key, service]) => ([{
                text: `${service.name} (${formatDuration(service.duration)})`,
                callback_data: `service_edit_${key}`
            }]));
            
            serviceButtons.push([{
                text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É",
                callback_data: "service_add"
            }]);
            
            const keyboard = {
                inline_keyboard: serviceButtons
            };
            
            bot.sendMessage(chatId, 
                '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:',
                {
                    reply_markup: keyboard
                }
            );
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
console.log('–ë–æ—Ç Eva Beauty –∑–∞–ø—É—â–µ–Ω...');
